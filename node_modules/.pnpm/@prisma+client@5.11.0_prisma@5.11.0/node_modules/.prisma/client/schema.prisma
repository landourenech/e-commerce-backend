generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CLIENT
  ADMIN
}

enum PaymentStatus {
  PENDING
  PAID
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  role      UserRole @default(CLIENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders    Order[]
}

model Category {
  id          String    @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products    Product[]
}

model Product {
  id          String    @id @default(cuid())
  name        String
  description String
  price       Float
  imageUrl    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]
}

model Order {
  id            String         @id @default(cuid())
  userId        String?        // ID de l'utilisateur connecté
  user          User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  guestEmail    String?        // Email du client anonyme
  guestName     String?        // Nom du client anonyme
  guestPhone    String?        // Numéro de téléphone du client anonyme
  total         Float
  paymentStatus PaymentStatus  @default(PENDING)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  orderItems    OrderItem[]

  @@index([userId])
  @@index([guestEmail])

  @@unique([userId, guestEmail])

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
}
